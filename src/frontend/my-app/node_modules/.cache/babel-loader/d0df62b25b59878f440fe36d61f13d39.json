{"ast":null,"code":"import _slicedToArray from \"/Users/minhphan/Dropbox/Mac/Documents/CS222/course-project-group-5/src/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { MenuUnstyledContext } from '../MenuUnstyled';\nimport { useButton } from '../ButtonUnstyled';\nexport default function useMenuItem(props) {\n  var _itemState$disabled;\n\n  var _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      ref = props.ref,\n      label = props.label;\n  var id = useId();\n  var menuContext = React.useContext(MenuUnstyledContext);\n  var itemRef = React.useRef(null);\n  var handleRef = useForkRef(itemRef, ref);\n\n  if (menuContext === null) {\n    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');\n  }\n\n  var registerItem = menuContext.registerItem,\n      unregisterItem = menuContext.unregisterItem,\n      open = menuContext.open;\n  React.useEffect(function () {\n    if (id === undefined) {\n      return undefined;\n    }\n\n    registerItem(id, {\n      disabled: disabled,\n      id: id,\n      ref: itemRef,\n      label: label\n    });\n    return function () {\n      return unregisterItem(id);\n    };\n  }, [id, registerItem, unregisterItem, disabled, ref, label]);\n\n  var _useButton = useButton({\n    disabled: disabled,\n    focusableWhenDisabled: true,\n    ref: handleRef\n  }),\n      getButtonProps = _useButton.getRootProps,\n      focusVisible = _useButton.focusVisible; // Ensure the menu item is focused when highlighted\n\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusRequested = _React$useState2[0],\n      requestFocus = _React$useState2[1];\n\n  var focusIfRequested = React.useCallback(function () {\n    if (focusRequested && itemRef.current != null) {\n      itemRef.current.focus();\n      requestFocus(false);\n    }\n  }, [focusRequested]);\n  React.useEffect(function () {\n    focusIfRequested();\n  });\n  React.useDebugValue({\n    id: id,\n    disabled: disabled,\n    label: label\n  });\n  var itemState = menuContext.getItemState(id != null ? id : '');\n\n  var _ref = itemState != null ? itemState : {\n    highlighted: false\n  },\n      highlighted = _ref.highlighted;\n\n  React.useEffect(function () {\n    requestFocus(highlighted && open);\n  }, [highlighted, open]);\n\n  if (id === undefined) {\n    return {\n      getRootProps: function getRootProps(other) {\n        return _extends({}, other, getButtonProps(other), {\n          role: 'menuitem'\n        });\n      },\n      disabled: false,\n      focusVisible: focusVisible\n    };\n  }\n\n  return {\n    getRootProps: function getRootProps(other) {\n      var optionProps = menuContext.getItemProps(id, other);\n      return _extends({}, other, getButtonProps(other), {\n        tabIndex: optionProps.tabIndex,\n        id: optionProps.id,\n        role: 'menuitem'\n      });\n    },\n    disabled: (_itemState$disabled = itemState == null ? void 0 : itemState.disabled) != null ? _itemState$disabled : false,\n    focusVisible: focusVisible\n  };\n}","map":null,"metadata":{},"sourceType":"module"}