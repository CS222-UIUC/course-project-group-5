{"ast":null,"code":"import _defineProperty from \"/Users/minhphan/Dropbox/Mac/Documents/CS222/course-project-group-5/src/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"component\", \"components\", \"componentsProps\", \"color\", \"size\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { generateUtilityClasses } from '@mui/base';\nimport SliderUnstyled, { SliderValueLabelUnstyled, sliderUnstyledClasses, getSliderUtilityClass } from '@mui/base/SliderUnstyled';\nimport { alpha, lighten, darken } from '@mui/system';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled, { slotShouldForwardProp } from '../styles/styled';\nimport useTheme from '../styles/useTheme';\nimport shouldSpreadAdditionalProps from '../utils/shouldSpreadAdditionalProps';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var sliderClasses = _extends({}, sliderUnstyledClasses, generateUtilityClasses('MuiSlider', ['colorPrimary', 'colorSecondary', 'thumbColorPrimary', 'thumbColorSecondary', 'sizeSmall', 'thumbSizeSmall']));\nvar SliderRoot = styled('span', {\n  name: 'MuiSlider',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    var ownerState = props.ownerState;\n    return [styles.root, styles[\"color\".concat(capitalize(ownerState.color))], ownerState.size !== 'medium' && styles[\"size\".concat(capitalize(ownerState.size))], ownerState.marked && styles.marked, ownerState.orientation === 'vertical' && styles.vertical, ownerState.track === 'inverted' && styles.trackInverted, ownerState.track === false && styles.trackFalse];\n  }\n})(function (_ref) {\n  var _extends2;\n\n  var theme = _ref.theme,\n      ownerState = _ref.ownerState;\n  return _extends({\n    borderRadius: 12,\n    boxSizing: 'content-box',\n    display: 'inline-block',\n    position: 'relative',\n    cursor: 'pointer',\n    touchAction: 'none',\n    color: (theme.vars || theme).palette[ownerState.color].main,\n    WebkitTapHighlightColor: 'transparent'\n  }, ownerState.orientation === 'horizontal' && _extends({\n    height: 4,\n    width: '100%',\n    padding: '13px 0',\n    // The primary input mechanism of the device includes a pointing device of limited accuracy.\n    '@media (pointer: coarse)': {\n      // Reach 42px touch target, about ~8mm on screen.\n      padding: '20px 0'\n    }\n  }, ownerState.size === 'small' && {\n    height: 2\n  }, ownerState.marked && {\n    marginBottom: 20\n  }), ownerState.orientation === 'vertical' && _extends({\n    height: '100%',\n    width: 4,\n    padding: '0 13px',\n    // The primary input mechanism of the device includes a pointing device of limited accuracy.\n    '@media (pointer: coarse)': {\n      // Reach 42px touch target, about ~8mm on screen.\n      padding: '0 20px'\n    }\n  }, ownerState.size === 'small' && {\n    width: 2\n  }, ownerState.marked && {\n    marginRight: 44\n  }), (_extends2 = {\n    '@media print': {\n      colorAdjust: 'exact'\n    }\n  }, _defineProperty(_extends2, \"&.\".concat(sliderClasses.disabled), {\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: (theme.vars || theme).palette.grey[400]\n  }), _defineProperty(_extends2, \"&.\".concat(sliderClasses.dragging), _defineProperty({}, \"& .\".concat(sliderClasses.thumb, \", & .\").concat(sliderClasses.track), {\n    transition: 'none'\n  })), _extends2));\n});\nprocess.env.NODE_ENV !== \"production\" ? SliderRoot.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node\n} : void 0;\nexport { SliderRoot };\nvar SliderRail = styled('span', {\n  name: 'MuiSlider',\n  slot: 'Rail',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.rail;\n  }\n})(function (_ref2) {\n  var ownerState = _ref2.ownerState;\n  return _extends({\n    display: 'block',\n    position: 'absolute',\n    borderRadius: 'inherit',\n    backgroundColor: 'currentColor',\n    opacity: 0.38\n  }, ownerState.orientation === 'horizontal' && {\n    width: '100%',\n    height: 'inherit',\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }, ownerState.orientation === 'vertical' && {\n    height: '100%',\n    width: 'inherit',\n    left: '50%',\n    transform: 'translateX(-50%)'\n  }, ownerState.track === 'inverted' && {\n    opacity: 1\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SliderRail.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node\n} : void 0;\nexport { SliderRail };\nvar SliderTrack = styled('span', {\n  name: 'MuiSlider',\n  slot: 'Track',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.track;\n  }\n})(function (_ref3) {\n  var theme = _ref3.theme,\n      ownerState = _ref3.ownerState;\n  var color = // Same logic as the LinearProgress track color\n  theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.5);\n  return _extends({\n    display: 'block',\n    position: 'absolute',\n    borderRadius: 'inherit',\n    border: '1px solid currentColor',\n    backgroundColor: 'currentColor',\n    transition: theme.transitions.create(['left', 'width', 'bottom', 'height'], {\n      duration: theme.transitions.duration.shortest\n    })\n  }, ownerState.size === 'small' && {\n    border: 'none'\n  }, ownerState.orientation === 'horizontal' && {\n    height: 'inherit',\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }, ownerState.orientation === 'vertical' && {\n    width: 'inherit',\n    left: '50%',\n    transform: 'translateX(-50%)'\n  }, ownerState.track === false && {\n    display: 'none'\n  }, ownerState.track === 'inverted' && {\n    backgroundColor: theme.vars ? theme.vars.palette.Slider[\"\".concat(ownerState.color, \"Track\")] : color,\n    borderColor: theme.vars ? theme.vars.palette.Slider[\"\".concat(ownerState.color, \"Track\")] : color\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SliderTrack.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node\n} : void 0;\nexport { SliderTrack };\nvar SliderThumb = styled('span', {\n  name: 'MuiSlider',\n  slot: 'Thumb',\n  overridesResolver: function overridesResolver(props, styles) {\n    var ownerState = props.ownerState;\n    return [styles.thumb, styles[\"thumbColor\".concat(capitalize(ownerState.color))], ownerState.size !== 'medium' && styles[\"thumbSize\".concat(capitalize(ownerState.size))]];\n  }\n})(function (_ref4) {\n  var _extends3;\n\n  var theme = _ref4.theme,\n      ownerState = _ref4.ownerState;\n  return _extends({\n    position: 'absolute',\n    width: 20,\n    height: 20,\n    boxSizing: 'border-box',\n    borderRadius: '50%',\n    outline: 0,\n    backgroundColor: 'currentColor',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    transition: theme.transitions.create(['box-shadow', 'left', 'bottom'], {\n      duration: theme.transitions.duration.shortest\n    })\n  }, ownerState.size === 'small' && {\n    width: 12,\n    height: 12\n  }, ownerState.orientation === 'horizontal' && {\n    top: '50%',\n    transform: 'translate(-50%, -50%)'\n  }, ownerState.orientation === 'vertical' && {\n    left: '50%',\n    transform: 'translate(-50%, 50%)'\n  }, (_extends3 = {\n    '&:before': _extends({\n      position: 'absolute',\n      content: '\"\"',\n      borderRadius: 'inherit',\n      width: '100%',\n      height: '100%',\n      boxShadow: (theme.vars || theme).shadows[2]\n    }, ownerState.size === 'small' && {\n      boxShadow: 'none'\n    }),\n    '&::after': {\n      position: 'absolute',\n      content: '\"\"',\n      borderRadius: '50%',\n      // 42px is the hit target\n      width: 42,\n      height: 42,\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)'\n    }\n  }, _defineProperty(_extends3, \"&:hover, &.\".concat(sliderClasses.focusVisible), {\n    boxShadow: \"0px 0px 0px 8px \".concat(theme.vars ? \"rgba(\".concat(theme.vars.palette[ownerState.color].mainChannel, \" / 0.16)\") : alpha(theme.palette[ownerState.color].main, 0.16)),\n    '@media (hover: none)': {\n      boxShadow: 'none'\n    }\n  }), _defineProperty(_extends3, \"&.\".concat(sliderClasses.active), {\n    boxShadow: \"0px 0px 0px 14px \".concat(theme.vars ? \"rgba(\".concat(theme.vars.palette[ownerState.color].mainChannel, \" / 0.16)\") : alpha(theme.palette[ownerState.color].main, 0.16))\n  }), _defineProperty(_extends3, \"&.\".concat(sliderClasses.disabled), {\n    '&:hover': {\n      boxShadow: 'none'\n    }\n  }), _extends3));\n});\nprocess.env.NODE_ENV !== \"production\" ? SliderThumb.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node\n} : void 0;\nexport { SliderThumb };\nvar SliderValueLabel = styled(SliderValueLabelUnstyled, {\n  name: 'MuiSlider',\n  slot: 'ValueLabel',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.valueLabel;\n  }\n})(function (_ref5) {\n  var _extends4;\n\n  var theme = _ref5.theme,\n      ownerState = _ref5.ownerState;\n  return _extends((_extends4 = {}, _defineProperty(_extends4, \"&.\".concat(sliderClasses.valueLabelOpen), {\n    transform: 'translateY(-100%) scale(1)'\n  }), _defineProperty(_extends4, \"zIndex\", 1), _defineProperty(_extends4, \"whiteSpace\", 'nowrap'), _extends4), theme.typography.body2, {\n    fontWeight: 500,\n    transition: theme.transitions.create(['transform'], {\n      duration: theme.transitions.duration.shortest\n    }),\n    transform: 'translateY(-100%) scale(0)',\n    position: 'absolute',\n    backgroundColor: (theme.vars || theme).palette.grey[600],\n    borderRadius: 2,\n    color: (theme.vars || theme).palette.common.white,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: '0.25rem 0.75rem'\n  }, ownerState.orientation === 'horizontal' && {\n    top: '-10px',\n    transformOrigin: 'bottom center',\n    '&:before': {\n      position: 'absolute',\n      content: '\"\"',\n      width: 8,\n      height: 8,\n      transform: 'translate(-50%, 50%) rotate(45deg)',\n      backgroundColor: 'inherit',\n      bottom: 0,\n      left: '50%'\n    }\n  }, ownerState.orientation === 'vertical' && {\n    right: '30px',\n    top: '24px',\n    transformOrigin: 'right center',\n    '&:before': {\n      position: 'absolute',\n      content: '\"\"',\n      width: 8,\n      height: 8,\n      transform: 'translate(-50%, 50%) rotate(45deg)',\n      backgroundColor: 'inherit',\n      right: '-20%',\n      top: '25%'\n    }\n  }, ownerState.size === 'small' && {\n    fontSize: theme.typography.pxToRem(12),\n    padding: '0.25rem 0.5rem'\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SliderValueLabel.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node\n} : void 0;\nexport { SliderValueLabel };\nvar SliderMark = styled('span', {\n  name: 'MuiSlider',\n  slot: 'Mark',\n  shouldForwardProp: function shouldForwardProp(prop) {\n    return slotShouldForwardProp(prop) && prop !== 'markActive';\n  },\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.mark;\n  }\n})(function (_ref6) {\n  var theme = _ref6.theme,\n      ownerState = _ref6.ownerState,\n      markActive = _ref6.markActive;\n  return _extends({\n    position: 'absolute',\n    width: 2,\n    height: 2,\n    borderRadius: 1,\n    backgroundColor: 'currentColor'\n  }, ownerState.orientation === 'horizontal' && {\n    top: '50%',\n    transform: 'translate(-1px, -50%)'\n  }, ownerState.orientation === 'vertical' && {\n    left: '50%',\n    transform: 'translate(-50%, 1px)'\n  }, markActive && {\n    backgroundColor: (theme.vars || theme).palette.background.paper,\n    opacity: 0.8\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SliderMark.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node\n} : void 0;\nexport { SliderMark };\nvar SliderMarkLabel = styled('span', {\n  name: 'MuiSlider',\n  slot: 'MarkLabel',\n  shouldForwardProp: function shouldForwardProp(prop) {\n    return slotShouldForwardProp(prop) && prop !== 'markLabelActive';\n  },\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.markLabel;\n  }\n})(function (_ref7) {\n  var theme = _ref7.theme,\n      ownerState = _ref7.ownerState,\n      markLabelActive = _ref7.markLabelActive;\n  return _extends({}, theme.typography.body2, {\n    color: (theme.vars || theme).palette.text.secondary,\n    position: 'absolute',\n    whiteSpace: 'nowrap'\n  }, ownerState.orientation === 'horizontal' && {\n    top: 30,\n    transform: 'translateX(-50%)',\n    '@media (pointer: coarse)': {\n      top: 40\n    }\n  }, ownerState.orientation === 'vertical' && {\n    left: 36,\n    transform: 'translateY(50%)',\n    '@media (pointer: coarse)': {\n      left: 44\n    }\n  }, markLabelActive && {\n    color: (theme.vars || theme).palette.text.primary\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SliderMarkLabel.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node\n} : void 0;\nexport { SliderMarkLabel };\n\nvar extendUtilityClasses = function extendUtilityClasses(ownerState) {\n  var color = ownerState.color,\n      size = ownerState.size,\n      _ownerState$classes = ownerState.classes,\n      classes = _ownerState$classes === void 0 ? {} : _ownerState$classes;\n  return _extends({}, classes, {\n    root: clsx(classes.root, getSliderUtilityClass(\"color\".concat(capitalize(color))), classes[\"color\".concat(capitalize(color))], size && [getSliderUtilityClass(\"size\".concat(capitalize(size))), classes[\"size\".concat(capitalize(size))]]),\n    thumb: clsx(classes.thumb, getSliderUtilityClass(\"thumbColor\".concat(capitalize(color))), classes[\"thumbColor\".concat(capitalize(color))], size && [getSliderUtilityClass(\"thumbSize\".concat(capitalize(size))), classes[\"thumbSize\".concat(capitalize(size))]])\n  });\n};\n\nvar Slider = /*#__PURE__*/React.forwardRef(function Slider(inputProps, ref) {\n  var _componentsProps$root, _componentsProps$thum, _componentsProps$trac, _componentsProps$valu;\n\n  var props = useThemeProps({\n    props: inputProps,\n    name: 'MuiSlider'\n  });\n  var theme = useTheme();\n  var isRtl = theme.direction === 'rtl';\n\n  var _props$component = props.component,\n      component = _props$component === void 0 ? 'span' : _props$component,\n      _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      _props$componentsProp = props.componentsProps,\n      componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ownerState = _extends({}, props, {\n    color: color,\n    size: size\n  });\n\n  var classes = extendUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(SliderUnstyled, _extends({}, other, {\n    isRtl: isRtl,\n    components: _extends({\n      Root: SliderRoot,\n      Rail: SliderRail,\n      Track: SliderTrack,\n      Thumb: SliderThumb,\n      ValueLabel: SliderValueLabel,\n      Mark: SliderMark,\n      MarkLabel: SliderMarkLabel\n    }, components),\n    componentsProps: _extends({}, componentsProps, {\n      root: _extends({}, componentsProps.root, shouldSpreadAdditionalProps(components.Root) && {\n        as: component,\n        ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {\n          color: color,\n          size: size\n        })\n      }),\n      thumb: _extends({}, componentsProps.thumb, shouldSpreadAdditionalProps(components.Thumb) && {\n        ownerState: _extends({}, (_componentsProps$thum = componentsProps.thumb) == null ? void 0 : _componentsProps$thum.ownerState, {\n          color: color,\n          size: size\n        })\n      }),\n      track: _extends({}, componentsProps.track, shouldSpreadAdditionalProps(components.Track) && {\n        ownerState: _extends({}, (_componentsProps$trac = componentsProps.track) == null ? void 0 : _componentsProps$trac.ownerState, {\n          color: color,\n          size: size\n        })\n      }),\n      valueLabel: _extends({}, componentsProps.valueLabel, shouldSpreadAdditionalProps(components.ValueLabel) && {\n        ownerState: _extends({}, (_componentsProps$valu = componentsProps.valueLabel) == null ? void 0 : _componentsProps$valu.ownerState, {\n          color: color,\n          size: size\n        })\n      })\n    }),\n    classes: classes,\n    ref: ref\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Slider.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The label of the slider.\n   */\n  'aria-label': chainPropTypes(PropTypes.string, function (props) {\n    var range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-label'] != null) {\n      return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The id of the element containing a label for the slider.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * A string value that provides a user-friendly name for the current value of the slider.\n   */\n  'aria-valuetext': chainPropTypes(PropTypes.string, function (props) {\n    var range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-valuetext'] != null) {\n      return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['primary', 'secondary']), PropTypes.string]),\n\n  /**\n   * The components used for each slot inside the Slider.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Input: PropTypes.elementType,\n    Mark: PropTypes.elementType,\n    MarkLabel: PropTypes.elementType,\n    Rail: PropTypes.elementType,\n    Root: PropTypes.elementType,\n    Thumb: PropTypes.elementType,\n    Track: PropTypes.elementType,\n    ValueLabel: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Slider.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    mark: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    markLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    rail: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    track: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    valueLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n      children: PropTypes.element,\n      className: PropTypes.string,\n      components: PropTypes.shape({\n        Root: PropTypes.elementType\n      }),\n      open: PropTypes.bool,\n      style: PropTypes.object,\n      value: PropTypes.number,\n      valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on'])\n    })])\n  }),\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.\n   * @default false\n   */\n  disableSwap: PropTypes.bool,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n   * This is important for screen reader users.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaLabel: PropTypes.func,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n   * This is important for screen reader users.\n   * @param {number} value The thumb label's value to format.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaValueText: PropTypes.func,\n\n  /**\n   * Indicates whether the theme context has rtl direction. It is set automatically.\n   * @default false\n   */\n  isRtl: PropTypes.bool,\n\n  /**\n   * Marks indicate predetermined values to which the user can move the slider.\n   * If `true` the marks are spaced according the value of the `step` prop.\n   * If an array, it should contain objects with `value` and an optional `label` keys.\n   * @default false\n   */\n  marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node,\n    value: PropTypes.number.isRequired\n  })), PropTypes.bool]),\n\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   * @default 100\n   */\n  max: PropTypes.number,\n\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   * @default 0\n   */\n  min: PropTypes.number,\n\n  /**\n   * Name attribute of the hidden `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {Event} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   * @param {number} activeThumb Index of the currently moved thumb.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback function that is fired when the `mouseup` is triggered.\n   *\n   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   */\n  onChangeCommitted: PropTypes.func,\n\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * A transformation function, to change the scale of the slider.\n   * @default (x) => x\n   */\n  scale: PropTypes.func,\n\n  /**\n   * The size of the slider.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n\n  /**\n   * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n   * The `min` prop serves as the origin for the valid values.\n   * We recommend (max - min) to be evenly divisible by the step.\n   *\n   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n   * @default 1\n   */\n  step: PropTypes.number,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Tab index attribute of the hidden `input` element.\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * The track presentation:\n   *\n   * - `normal` the track will render a bar representing the slider value.\n   * - `inverted` the track will render a bar representing the remaining slider value.\n   * - `false` the track will render without a bar.\n   * @default 'normal'\n   */\n  track: PropTypes.oneOf(['inverted', 'normal', false]),\n\n  /**\n   * The value of the slider.\n   * For ranged sliders, provide an array with two values.\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n\n  /**\n   * Controls when the value label is displayed:\n   *\n   * - `auto` the value label will display when the thumb is hovered or focused.\n   * - `on` will display persistently.\n   * - `off` will never display.\n   * @default 'off'\n   */\n  valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on']),\n\n  /**\n   * The format function the value label's value.\n   *\n   * When a function is provided, it should have the following signature:\n   *\n   * - {number} value The value label's value to format\n   * - {number} index The value label's index to format\n   * @default (x) => x\n   */\n  valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n} : void 0;\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}