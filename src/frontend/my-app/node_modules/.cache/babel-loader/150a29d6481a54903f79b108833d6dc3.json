{"ast":null,"code":"import _slicedToArray from \"/Users/minhphan/Dropbox/Mac/Documents/CS222/course-project-group-5/src/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { defaultListboxReducer, useListbox, ActionTypes } from '../ListboxUnstyled';\n\nfunction stateReducer(state, action) {\n  if (action.type === ActionTypes.blur || action.type === ActionTypes.optionHover || action.type === ActionTypes.setValue) {\n    return state;\n  }\n\n  var newState = defaultListboxReducer(state, action);\n\n  if (action.type !== ActionTypes.setHighlight && newState.highlightedValue === null && action.props.options.length > 0) {\n    return _extends({}, newState, {\n      highlightedValue: action.props.options[0]\n    });\n  }\n\n  return newState;\n}\n\nexport default function useMenu() {\n  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var listboxRefProp = parameters.listboxRef,\n      _parameters$open = parameters.open,\n      open = _parameters$open === void 0 ? false : _parameters$open,\n      onClose = parameters.onClose,\n      listboxId = parameters.listboxId;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      menuItems = _React$useState2[0],\n      setMenuItems = _React$useState2[1];\n\n  var listboxRef = React.useRef(null);\n  var handleRef = useForkRef(listboxRef, listboxRefProp);\n  var registerItem = React.useCallback(function (id, metadata) {\n    setMenuItems(function (previousState) {\n      var newState = _extends({}, previousState);\n\n      newState[id] = metadata;\n      return newState;\n    });\n  }, []);\n  var unregisterItem = React.useCallback(function (id) {\n    setMenuItems(function (previousState) {\n      var newState = _extends({}, previousState);\n\n      delete newState[id];\n      return newState;\n    });\n  }, []);\n\n  var _useListbox = useListbox({\n    options: Object.keys(menuItems),\n    optionStringifier: function optionStringifier(id) {\n      var _menuItems$id$ref$cur;\n\n      return menuItems[id].label || ((_menuItems$id$ref$cur = menuItems[id].ref.current) == null ? void 0 : _menuItems$id$ref$cur.innerText);\n    },\n    isOptionDisabled: function isOptionDisabled(id) {\n      var _menuItems$id;\n\n      return (menuItems == null ? void 0 : (_menuItems$id = menuItems[id]) == null ? void 0 : _menuItems$id.disabled) || false;\n    },\n    listboxRef: handleRef,\n    focusManagement: 'DOM',\n    id: listboxId,\n    stateReducer: stateReducer,\n    disabledItemsFocusable: true\n  }),\n      getOptionState = _useListbox.getOptionState,\n      getOptionProps = _useListbox.getOptionProps,\n      getRootProps = _useListbox.getRootProps,\n      highlightedOption = _useListbox.highlightedOption,\n      setListboxHighlight = _useListbox.setHighlightedValue;\n\n  var highlightFirstItem = React.useCallback(function () {\n    if (Object.keys(menuItems).length > 0) {\n      setListboxHighlight(menuItems[Object.keys(menuItems)[0]].id);\n    }\n  }, [menuItems, setListboxHighlight]);\n  var highlightLastItem = React.useCallback(function () {\n    if (Object.keys(menuItems).length > 0) {\n      setListboxHighlight(menuItems[Object.keys(menuItems)[Object.keys(menuItems).length - 1]].id);\n    }\n  }, [menuItems, setListboxHighlight]);\n  React.useEffect(function () {\n    if (!open) {\n      highlightFirstItem();\n    }\n  }, [open, highlightFirstItem]);\n\n  var createHandleKeyDown = function createHandleKeyDown(otherHandlers) {\n    return function (e) {\n      var _otherHandlers$onKeyD;\n\n      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, e);\n\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      if (e.key === 'Escape' && open) {\n        onClose == null ? void 0 : onClose();\n      }\n    };\n  };\n\n  var createHandleBlur = function createHandleBlur(otherHandlers) {\n    return function (e) {\n      var _otherHandlers$onBlur, _listboxRef$current;\n\n      (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, e);\n\n      if (!((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(e.relatedTarget))) {\n        onClose == null ? void 0 : onClose();\n      }\n    };\n  };\n\n  React.useEffect(function () {\n    var _listboxRef$current2; // set focus to the highlighted item (but prevent stealing focus from other elements on the page)\n\n\n    if ((_listboxRef$current2 = listboxRef.current) != null && _listboxRef$current2.contains(document.activeElement) && highlightedOption !== null) {\n      var _menuItems$highlighte, _menuItems$highlighte2;\n\n      menuItems == null ? void 0 : (_menuItems$highlighte = menuItems[highlightedOption]) == null ? void 0 : (_menuItems$highlighte2 = _menuItems$highlighte.ref.current) == null ? void 0 : _menuItems$highlighte2.focus();\n    }\n  }, [highlightedOption, menuItems]);\n\n  var getListboxProps = function getListboxProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var rootProps = getRootProps(_extends({}, otherHandlers, {\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    }));\n    return _extends({}, otherHandlers, rootProps, {\n      role: 'menu'\n    });\n  };\n\n  var getItemState = function getItemState(id) {\n    var _getOptionState = getOptionState(id),\n        disabled = _getOptionState.disabled,\n        highlighted = _getOptionState.highlighted;\n\n    return {\n      disabled: disabled,\n      highlighted: highlighted\n    };\n  };\n\n  React.useDebugValue({\n    menuItems: menuItems,\n    highlightedOption: highlightedOption\n  });\n  return {\n    registerItem: registerItem,\n    unregisterItem: unregisterItem,\n    menuItems: menuItems,\n    getListboxProps: getListboxProps,\n    getItemState: getItemState,\n    getItemProps: getOptionProps,\n    highlightedOption: highlightedOption,\n    highlightFirstItem: highlightFirstItem,\n    highlightLastItem: highlightLastItem\n  };\n}","map":null,"metadata":{},"sourceType":"module"}