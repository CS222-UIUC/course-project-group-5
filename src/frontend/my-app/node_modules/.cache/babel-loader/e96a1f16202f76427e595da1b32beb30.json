{"ast":null,"code":"import _defineProperty from \"/Users/minhphan/Dropbox/Mac/Documents/CS222/course-project-group-5/src/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"autoComplete\", \"autoFocus\", \"className\", \"component\", \"components\", \"componentsProps\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"id\", \"multiline\", \"name\", \"onClick\", \"onChange\", \"onKeyDown\", \"onKeyUp\", \"onFocus\", \"onBlur\", \"placeholder\", \"readOnly\", \"required\", \"startAdornment\", \"value\", \"type\", \"rows\", \"minRows\", \"maxRows\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport isHostComponent from '../utils/isHostComponent';\nimport classes from './inputUnstyledClasses';\nimport useInput from './useInput';\nimport { useSlotProps } from '../utils';\n/**\n *\n * Demos:\n *\n * - [Unstyled Input](https://mui.com/base/react-input/)\n *\n * API:\n *\n * - [InputUnstyled API](https://mui.com/base/api/input-unstyled/)\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar InputUnstyled = /*#__PURE__*/React.forwardRef(function InputUnstyled(props, forwardedRef) {\n  var _rootStateClasses, _inputStateClasses;\n\n  var _ref, _components$Textarea, _components$Input;\n\n  var ariaDescribedby = props['aria-describedby'],\n      ariaLabel = props['aria-label'],\n      ariaLabelledby = props['aria-labelledby'],\n      autoComplete = props.autoComplete,\n      autoFocus = props.autoFocus,\n      className = props.className,\n      component = props.component,\n      _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      _props$componentsProp = props.componentsProps,\n      componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      endAdornment = props.endAdornment,\n      error = props.error,\n      id = props.id,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onClick = props.onClick,\n      onChange = props.onChange,\n      onKeyDown = props.onKeyDown,\n      onKeyUp = props.onKeyUp,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      placeholder = props.placeholder,\n      readOnly = props.readOnly,\n      required = props.required,\n      startAdornment = props.startAdornment,\n      value = props.value,\n      typeProp = props.type,\n      rows = props.rows,\n      minRows = props.minRows,\n      maxRows = props.maxRows,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useInput = useInput({\n    disabled: disabled,\n    defaultValue: defaultValue,\n    error: error,\n    onBlur: onBlur,\n    onClick: onClick,\n    onChange: onChange,\n    onFocus: onFocus,\n    required: required,\n    value: value\n  }),\n      getRootProps = _useInput.getRootProps,\n      getInputProps = _useInput.getInputProps,\n      focused = _useInput.focused,\n      formControlContext = _useInput.formControlContext,\n      errorState = _useInput.error,\n      disabledState = _useInput.disabled;\n\n  var type = !multiline ? typeProp != null ? typeProp : 'text' : undefined;\n\n  var ownerState = _extends({}, props, {\n    disabled: disabledState,\n    error: errorState,\n    focused: focused,\n    formControlContext: formControlContext,\n    multiline: multiline,\n    type: type\n  });\n\n  var rootStateClasses = (_rootStateClasses = {}, _defineProperty(_rootStateClasses, classes.disabled, disabledState), _defineProperty(_rootStateClasses, classes.error, errorState), _defineProperty(_rootStateClasses, classes.focused, focused), _defineProperty(_rootStateClasses, classes.formControl, Boolean(formControlContext)), _defineProperty(_rootStateClasses, classes.multiline, multiline), _defineProperty(_rootStateClasses, classes.adornedStart, Boolean(startAdornment)), _defineProperty(_rootStateClasses, classes.adornedEnd, Boolean(endAdornment)), _rootStateClasses);\n  var inputStateClasses = (_inputStateClasses = {}, _defineProperty(_inputStateClasses, classes.disabled, disabledState), _defineProperty(_inputStateClasses, classes.multiline, multiline), _inputStateClasses);\n  var propsToForward = {\n    'aria-describedby': ariaDescribedby,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    id: id,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    name: name,\n    placeholder: placeholder,\n    readOnly: readOnly,\n    type: type\n  };\n  var Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';\n  var rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: componentsProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState: ownerState,\n    className: [classes.root, rootStateClasses, className]\n  });\n  var Input = multiline ? (_components$Textarea = components.Textarea) != null ? _components$Textarea : 'textarea' : (_components$Input = components.Input) != null ? _components$Input : 'input';\n  var inputProps = useSlotProps({\n    elementType: Input,\n    getSlotProps: function getSlotProps(otherHandlers) {\n      return getInputProps(_extends({}, otherHandlers, propsToForward));\n    },\n    externalSlotProps: componentsProps.input,\n    additionalProps: _extends({\n      rows: multiline ? rows : undefined\n    }, multiline && !isHostComponent(Input) && {\n      minRows: rows || minRows,\n      maxRows: rows || maxRows\n    }),\n    ownerState: ownerState,\n    className: [classes.input, inputStateClasses]\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (multiline) {\n      if (rows) {\n        if (minRows || maxRows) {\n          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    children: [startAdornment, /*#__PURE__*/_jsx(Input, _extends({}, inputProps)), endAdornment]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  'aria-describedby': PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Input: PropTypes.elementType,\n    Root: PropTypes.elementType,\n    Textarea: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Trailing adornment for this input.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the `input` will indicate an error.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.number,\n\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.number,\n\n  /**\n   * If `true`, a `textarea` element is rendered.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.number,\n\n  /**\n   * Leading adornment for this input.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   * @default 'text'\n   */\n  type: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOf(['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week']),\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default InputUnstyled;","map":null,"metadata":{},"sourceType":"module"}